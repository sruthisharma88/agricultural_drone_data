import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Create synthetic dataset
np.random.seed(42)
n_samples = 500

data = {
    'field_id': np.random.randint(1, 50, n_samples),
    'ndvi': np.random.uniform(0.2, 0.9, n_samples),  # Vegetation health
    'temperature': np.random.uniform(20, 40, n_samples),
    'humidity': np.random.uniform(30, 90, n_samples),
    'soil_moisture': np.random.uniform(10, 50, n_samples),
}

df = pd.DataFrame(data)

# Generate 'crop_yield' with formula + noise
df['crop_yield'] = (
    5 * df['ndvi'] +
    0.3 * df['soil_moisture'] -
    0.2 * df['temperature'] +
    0.1 * df['humidity'] +
    np.random.normal(0, 2, n_samples)
)

# ðŸ§  SQL-style queries (via pandas)
avg_yield_by_field = df.groupby('field_id')['crop_yield'].mean().reset_index()
print("Average Yield by Field:\n", avg_yield_by_field.head())

# ðŸ“Š Visualize relationships
sns.pairplot(df[['ndvi', 'temperature', 'humidity', 'soil_moisture', 'crop_yield']])
plt.show()

# ðŸ¤– Machine Learning Regression
features = ['ndvi', 'temperature', 'humidity', 'soil_moisture']
X = df[features]
y = df['crop_yield']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# ðŸ“ˆ Evaluation
print("RÂ² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

# Plot actual vs predicted
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Crop Yield")
plt.ylabel("Predicted Crop Yield")
plt.title("Actual vs Predicted Crop Yield")
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')
plt.grid()
plt.show()
